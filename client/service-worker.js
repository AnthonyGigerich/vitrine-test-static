!function () { "use strict"; const e = 1665041709859, t = "cache" + e, n = ["/client/client.08d55549.js", "/client/inject_styles.5607aec6.js", "/client/index.934b7109.js", "/client/Page.95edd324.js", "/client/[slug].14213cca.js"].concat(["/service-worker-index.html", "/Banniere_Defi-iDocSante.jpg", "/Haute_Autorite_de_Sante_Logo.png", "/Logo_Defi-iDocSante-clair.png", "/Logo_Defi-iDocSante.png", "/favicon.png", "/logo-192.png", "/logo-512.png", "/mail-142.png", "/manifest.json", "/markdown/reglement.md"]), s = new Set(n); self.addEventListener("install", (e => { e.waitUntil(caches.open(t).then((e => e.addAll(n))).then((() => { self.skipWaiting() }))) })), self.addEventListener("activate", (e => { e.waitUntil(caches.keys().then((async e => { for (const n of e) n !== t && await caches.delete(n); self.clients.claim() }))) })), self.addEventListener("fetch", (t => { if ("GET" !== t.request.method || t.request.headers.has("range")) return; const n = new URL(t.request.url); if (n.protocol.startsWith("http") && (n.hostname !== self.location.hostname || n.port === self.location.port)) if (n.host === self.location.host && s.has(n.pathname)) { let e = caches.match(t.request); void 0 !== e.PromiseResult && t.respondWith(e) } else "only-if-cached" !== t.request.cache && t.respondWith(caches.open("offline" + e).then((async e => { try { const n = await fetch(t.request); return e.put(t.request, n.clone()), n } catch (n) { const s = await e.match(t.request); if (s) return s; throw n } }))) })) }();
